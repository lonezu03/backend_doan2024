// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebStore.Context;

#nullable disable

namespace WebStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebStore.Entity.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address_Line")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("WebStore.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("WebStore.Entity.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("WebStore.Entity.Description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Description");
                });

            modelBuilder.Entity("WebStore.Entity.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("WebStore.Entity.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Variant_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Variant_Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("WebStore.Entity.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Min_quantity")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Variant_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Variant_Id");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("WebStore.Entity.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("WebStore.Entity.Order_Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Inventory_Id")
                        .HasColumnType("int");

                    b.Property<string>("Nameitem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order_Id")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Inventory_Id")
                        .IsUnique();

                    b.HasIndex("Order_Id");

                    b.ToTable("Order_Item");
                });

            modelBuilder.Entity("WebStore.Entity.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Shipping_Id")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("total_amount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebStore.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender_Id")
                        .HasColumnType("int");

                    b.Property<int>("Material_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Gender_Id");

                    b.HasIndex("Material_Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("WebStore.Entity.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Size");
                });

            modelBuilder.Entity("WebStore.Entity.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebStore.Entity.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Category_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Color_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Description_Id")
                        .HasColumnType("int");

                    b.Property<int>("Product_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Size_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Category_Id");

                    b.HasIndex("Color_Id");

                    b.HasIndex("Description_Id");

                    b.HasIndex("Product_Id");

                    b.HasIndex("Size_Id");

                    b.ToTable("Variant");
                });

            modelBuilder.Entity("WebStore.Entity.Address", b =>
                {
                    b.HasOne("WebStore.Entity.Users", "User")
                        .WithMany("Address")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebStore.Entity.Image", b =>
                {
                    b.HasOne("WebStore.Entity.Variant", "Variant")
                        .WithMany("Images")
                        .HasForeignKey("Variant_Id");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("WebStore.Entity.Inventory", b =>
                {
                    b.HasOne("WebStore.Entity.Variant", "Variant")
                        .WithMany("Inventories")
                        .HasForeignKey("Variant_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("WebStore.Entity.Order_Item", b =>
                {
                    b.HasOne("WebStore.Entity.Inventory", "Inventory")
                        .WithOne("Order_Item")
                        .HasForeignKey("WebStore.Entity.Order_Item", "Inventory_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebStore.Entity.Orders", "Order")
                        .WithMany("OrderItem")
                        .HasForeignKey("Order_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("WebStore.Entity.Orders", b =>
                {
                    b.HasOne("WebStore.Entity.Users", "Users")
                        .WithMany("orders")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebStore.Entity.Product", b =>
                {
                    b.HasOne("WebStore.Entity.Gender", "Gender")
                        .WithMany("Products")
                        .HasForeignKey("Gender_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebStore.Entity.Material", "Material")
                        .WithMany("Products")
                        .HasForeignKey("Material_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("WebStore.Entity.Variant", b =>
                {
                    b.HasOne("WebStore.Entity.Category", "Category")
                        .WithMany("Variants")
                        .HasForeignKey("Category_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebStore.Entity.Color", "Color")
                        .WithMany("Variants")
                        .HasForeignKey("Color_Id");

                    b.HasOne("WebStore.Entity.Description", "Description")
                        .WithMany("Variant")
                        .HasForeignKey("Description_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebStore.Entity.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebStore.Entity.Size", "Size")
                        .WithMany("Variants")
                        .HasForeignKey("Size_Id");

                    b.Navigation("Category");

                    b.Navigation("Color");

                    b.Navigation("Description");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("WebStore.Entity.Category", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("WebStore.Entity.Color", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("WebStore.Entity.Description", b =>
                {
                    b.Navigation("Variant");
                });

            modelBuilder.Entity("WebStore.Entity.Gender", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebStore.Entity.Inventory", b =>
                {
                    b.Navigation("Order_Item")
                        .IsRequired();
                });

            modelBuilder.Entity("WebStore.Entity.Material", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebStore.Entity.Orders", b =>
                {
                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("WebStore.Entity.Product", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("WebStore.Entity.Size", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("WebStore.Entity.Users", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("orders");
                });

            modelBuilder.Entity("WebStore.Entity.Variant", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Inventories");
                });
#pragma warning restore 612, 618
        }
    }
}
